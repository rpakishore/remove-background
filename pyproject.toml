[project]
name = "rmbg"
version = "0.0.1"
requires-python = ">=3.12.0"
authors = [{name = "Arun Kishore", email = "pypi@rpakishore.co.in"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = ["License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)"]
dependencies = [
    "numpy>=2.2.5",
    "pillow>=11.2.1",
    "pymupdf>=1.25.5",
    "rich>=13.9.4",
    "streamlit>=1.45.0",
    "streamlit-image-coordinates>=0.2.1",
    "typer>=0.15.1",
]

[project.urls]
Home = "https://github.com/rpakishore/remove-background"

[project.scripts]
cli="rmbg.__main__:app"
gui="rmbg.__main__:gui"

[tool.setuptools.dynamic]
description = {file = "README.md"}


[dependency-groups]
dev = [
    "ruff>=0.9.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
]


[tool.uv]
default-groups = []
package = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88    # Same as Black.
indent-width = 4    # Same as Black.

target-version = "py312"    # Assume Python 3.12

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]   # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$" # Allow unused variables when underscore-prefixed.
extend-select = [
    "E",     # Pycodestyle errors (style issues)
    "W",     # Pycodestyle warnings (style issues)
    "C90",   # McCabe – complexity metric for functions
    "I",     # isort – import ordering checks
    "N",     # PEP8 Naming – naming conventions
    "D",     # Pydocstyle – docstring formatting
    "UP",    # Pyupgrade – upgrades syntax to newer Python versions
    "YTT",   # Flake8-2020 – checks for Python 2020 best practices
    "ANN",   # Flake8-annotations – enforces type annotation style
    "ASYNC", # Flake8-async – checks async/await usage
    "S",     # Flake8-bandit – security issues
    "BLE",   # Flake8-blind-except – flags bare excepts
    "FBT",   # Flake8-boolean-trap – potential pitfalls with booleans
    "B",     # Flake8-bugbear – common bug patterns
    "A",     # Flake8-builtins – misuse of Python built-in names
    "COM",   # Flake8-commas – trailing/comma issues
    # "CPY",   # Flake8-copyright – copyright header checks (commented out as in original)
    "C4",    # Flake8-comprehensions – best practices in comprehensions
    "DTZ",   # Flake8-datetimez – requires timezone-aware datetime objects
    "T10",   # Flake8-debugger – debugger statements (e.g. pdb)
    "DJ",    # Flake8-django – Django-specific conventions
    "EM",    # Flake8-errmsg – error message style
    "EXE",   # Flake8-executable – executable file checks
    "FA",    # Flake8-future-annotations – future import for annotations
    "ISC",   # Flake8-implicit-str-concat – warns on implicit string concatenation
    "ICN",   # Flake8-import-conventions – enforces conventional import aliases
    "LOG",   # Flake8-logging – proper logging usage
    "G",     # Flake8-logging-format – logging format string issues
    "INP",   # Flake8-no-pep420 – warns against non-PEP420 namespace usage
    "PIE",   # Flake8-pie – Python improvement suggestions
    # "T20",   # Flake8-print – disallows print statements (commented out as in original)
    "PYI",   # Flake8-pyi – checks for type stub (.pyi) consistency
    "PT",    # Flake8-pytest-style – pytest best practices
    "Q",     # Flake8-quotes – enforces quote style consistency
    "RSE",   # Flake8-raise – proper raise statement usage
    "RET",   # Flake8-return – return statement issues
    "SLF",   # Flake8-self – flags instance methods that don't use self
    "SLOT",  # Flake8-slots – suggests use of __slots__ where appropriate
    "SIM",   # Flake8-simplify – code simplification hints
    "TID",   # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
    "TC",    # Flake8-type-checking – proper import of typing in type checks
    "INT",   # Flake8-gettext – checks for proper internationalization usage
    "ARG",   # Flake8-unused-arguments – flags unused function arguments
    "PTH",   # Flake8-use-pathlib – encourages pathlib over os.path
    "TD",    # Flake8-todos – flags TODO comments
    "FIX",   # Flake8-fixme – flags FIXME comments
    # "ERA",   # Eradicate – detects commented-out code (potentially dangerous) (commented out as in original)
    "PD",    # Pandas-vet – checks pandas-specific code practices
    "PGH",   # Pygrep-hooks – custom grep hooks for linting
    "PL",    # Pylint – integration with Pylint conventions
    "TRY",   # Tryceratops – try/except usage suggestions
    "FLY",   # Flynt – f-string conversion suggestions
    "NPY",   # NumPy-specific rules – ensures NumPy coding standards
    "FAST",  # FastAPI – FastAPI-specific linting rules
    "AIR",   # Airflow – Airflow-specific linting rules
    "PERF",  # Perflint – performance-related checks
    "FURB",  # Refurb – rules for code refurbishment
    # "DOC",   # Pydoclint – docstring linting and consistency (commented out as in original)
    "RUF",   # Ruff-specific rules – additional Ruff checks
]
ignore = [
    "E501",    # Pycodestyle - line too long
    "D1",      # Pydocstyle - missing docstring in public module, class, or function
    "FBT003",  # Flake8-boolean-trap - boolean position value in function call
    "D203",    # Pydocstyle - one blank line required before class docstring
    "D212",    # Pydocstyle - summary line should be immediately after the opening quotes.
    "D401",    # Pydocstyle - Checks for docstring first lines that are not in an imperative mood.
    "S311",    # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PERF401", # Perflint - Checks for for loops that can be replaced by a list comprehension.
    "RET504",  # Flake8-return - Checks for variable assignments that immediately precede a return of the assigned variable.
    "FA102",   # Flake8-future-annotations - Missing `from __future__ import annotations`, but uses PEP 604 union
    "COM812",
    "ANN401",  # Dynamically typed expressions `Any`
    "G004",    # Logging statement uses f-string
    "W191",    # Indentation contains tabs
    "D206",    # Pydocstyle - Missing docstring in public method
    "ERA001",  # Eradicate - Commented-out code
    "T201",    # Flake8-print - Do not use print()
    "EM102",   # Flake8-errmsg - Use f-string for string interpolation
    "TRY003",
    "TRY300",
    "TRY301",
    "FBT001",  # Flake8-boolean-trap - Boolean position value in function call
    "FBT002",  # Flake8-boolean-trap - Boolean position value in function call
    "BLE001",  # Do not catch blind exception: `Exception`
    "EM101",   # Flake8-errmsg - Use f-string for string interpolation
    "RUF012",
    "E101"
]


[tool.ruff.format]
quote-style = "double"              # Like Black, use double quotes for strings.
indent-style = "tab"
skip-magic-trailing-comma = false   # Like Black, respect magic trailing commas.
line-ending = "auto"                # Like Black, automatically detect the appropriate line ending.

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "BLE001", # Do not catch blind exception: `Exception`
    "ANN001", # Dynamically typed expressions `Any`
    "ANN201",
    "SLF001",
    "B017",
    "PT011"
]

[tool.pytest.ini_options]
addopts = [
    "--cov=.",
    "--cov-branch",
    "--cov-fail-under=75",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--import-mode=importlib",
]
filterwarnings = [
    "ignore::DeprecationWarning:importlib._bootstrap:",
    "ignore::DeprecationWarning:builtin:",
]
norecursedirs = [".*", "__pycache__", "htmlcov"]
pythonpath = ["src"]
python_files = "test_*.py"
testpaths = ["src/tests"]